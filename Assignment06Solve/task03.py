# -*- coding: utf-8 -*-
"""task03.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1D8IYyDZGu135k9zShTk43yvNuFa6QWIK
"""

import math
from queue import  PriorityQueue

inp_file=  open('input3.txt', "r")
out_file=  open('output3.txt', "w")
read_file= inp_file.readline().split()
em_dictionary={}
save=1
#-----------------------------
nodes= int( read_file[0] )
edges= int( read_file[1] )

for a in range (nodes+1) :
  em_dictionary.update( {a:[]})
for b in range(edges) :
  r= inp_file.readline().split()
  em_dictionary[ int(r[0])].append(( (int(r[2]), int(r[1]) )))

#-----------------------------
def safest_path (graph,save) :
  em_list=[]
  temp=[math.inf]*(nodes+1)
  
  temp[save]= 0
  pqueue= PriorityQueue()
  pqueue.put((0,save))
  
  edges= 0
#--------------------------------  
  while pqueue.empty()== False :
    flag= pqueue.get()
    em_list.append(flag[1] )
    
    if(flag[0] < temp[flag[1]]) :
      temp[flag[1]]= flag[0]
    
    for d in graph[flag[1]]:
      edges= max(flag[0],d[0])
      
      if(d[1] not in em_list):
        pqueue.put((edges,d[1]))
  
  return temp[-1]   
#-----------------------------  
print(safest_path (em_dictionary,save) ,file=out_file)
inp_file.close()
out_file.close()