# -*- coding: utf-8 -*-
"""task02.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1SN7uweK7oPsjeJp956ltn6MSnvuKwVlQ
"""

import math
from queue import  PriorityQueue
inp_file=  open('input2.txt', "r")
out_file=  open('output2.txt', "w")

nodes,edge=list (map (int, inp_file.readline(). split(' ')) )
#--------------------------------
def Dijkstra_algo(source,graph,c) :
    em_list= [math.inf]*( nodes+1)
    
    queue= PriorityQueue()
    queue.put((c, source) )  
    
    while not queue.empty() :
        
      value ,source= queue.get()
        
      if em_list[ int(source)] > value :   
        em_list[ int(source)] = value
        
        if graph[ int(source)] != None :
          
          for i in graph[ int(source)] :  
            source, up_value= i
            queue.put( (up_value+value,source))
        else :
          pass
      else :
        pass
        
    return  em_list
#--------------------------------
def Graph(nodes, edge) :
  adj_lst= [None]*( nodes+1 )
  
  for x in range(edge) :
    u,v,w= list( map(int,inp_file.readline().split(' ')))
    
    if adj_lst[u] != None :
      adj_lst[u].append( (str(v),w))
    
    else :
      adj_lst[u]= [ (str(v),w) ]
  return  adj_lst
#--------------------------------
adj_lst=  Graph(nodes,edge)
source,a= inp_file.readline().split(" ")

temp1= Dijkstra_algo ( source, adj_lst, 0)
temp2= Dijkstra_algo ( a, adj_lst, 0)
node= None
total_time= math.inf

for c in range(len (temp1) ) :
  
  if temp2[c]!= math.inf and temp1[c]!= math.inf :
    store = max( temp2[c], temp1[c])
    
    if total_time> store :
      node= c
      
      total_time= store
#--------------------------------      
if node != None :
  print('Time', total_time , file = out_file)
  print('Node', node , file = out_file)

else:
  print('Impossible', file = out_file)

inp_file.close()
out_file.close()