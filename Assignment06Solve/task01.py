# -*- coding: utf-8 -*-
"""task01.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LqGmHYH9JLMYQ0z4ztl_jHNhxU8inQp7
"""

import math
from queue import PriorityQueue
inp_file=   open('input1.txt' ,"r")
out_file=   open('output1.txt' ,"w")

nodes,edge= list(map ( int, inp_file.readline().split(' ') ))
adj_lst =  [None]* (nodes +1)
#-------------------------------------------
def Dijkstra_algo( source, graphs, c) :
  em_list= [ math.inf]* ( nodes+1)
  
  queue= PriorityQueue()
  queue.put((c,source))  
    
  while not  queue.empty() :
        
    value, source = queue.get()
        
    if em_list[int(source)] > value :   
      em_list[int(source)]  = value
      
      if graphs[int(source)] != None :
        
        for i in graphs[int(source)]:  
          source, up_value =  i
          queue.put ((up_value+ value, source))
      
      else  :
        pass
    
    else :
      pass
        
  return em_list

#-------------------------------------
for x in range(edge) :
  u,v,w = list(map(int, inp_file.readline(). split(" ")))
  
  if adj_lst[u] !=None :
    adj_lst[u].append((str(v),w))
  else :
    
    adj_lst[u] = [(str(v) ,w)]

temp= int(inp_file.readline())
final= Dijkstra_algo(temp,adj_lst, 0)
#-------------------------------------
for x in range(1 ,len(final) ) :
  if final[x] != math.inf :
    print(final[x], file = out_file , end=' ')
    
  else:
    print(-1 , file = out_file , end=' ' )
inp_file.close()
out_file.close()