# -*- coding: utf-8 -*-
"""task3.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1duTn5qpMKaE05oviKWhDS4eVcZc8FYdH
"""

# task 3 (a)
def bubble_sort(array):
   
  mark=1
  
  for a in range((len(array)-1)//2): 
    
    for b in range((len(array)//2)-a-1): 
      save=int(array[(2*b)+1])
      
      if save > int(array[2*(b+1)+1]):
        array[2*b], array[2*(b+1)] = array[2*(b+1)], array[2*b]
        
        array[2*b+1], array[2*(b+1)+1] = array[2*(b+1)+1], array[2*b+1]
        mark=0
    
    if mark==1:
      break
    
  return array

def print_queue(mew1):
  pass

#----------------------------
def en_que(x,y,lst1):
    
  lst1.append(x)
  lst1.append(int(y))
  
  lst1=bubble_sort(lst1)
  return lst1

def de_queue(lst1):
  mark=lst1[0]
  mark2=lst1[1]
  
  lst1=lst1[2::]
  output_file.write(f'Visited:({mark} {mark2} )  \n')
  return lst1
    
#--------------------------
input_file1 = open("input3_a.txt", "r")
output_file= open("output3_a.txt", "w")

x=input_file1.readline()
lst1=[]
while x.endswith("\n"):
  if x.strip()!="see doctor":
    x=x.split(" ") 
    
    lst1=en_que(x[0],x[1],lst1)
    print_queue(lst1 )
       
  elif x.strip()=="see doctor":
    lst1=de_queue(lst1)
    print_queue(lst1 )
  x=input_file1.readline()

if x.strip()!="see doctor":
    x=x.split(" ")
    lst1=en_que(x[0],x[1],lst1) 
    
    print_queue(lst1 )
elif x.strip()=="see doctor":
    lst1=de_queue(lst1)
print_queue(lst1 )
output_file.write(str(lst1))
output_file.close()

# task 3 (b)
class heap_sort:
  
  def __init__(self):
    self.heap = [0]
    
    self.size = 0

  def swim_n(self, i):
    if i <=1 :
      return
    mark = i //2
    
    if self.heap[mark][1] > self.heap[i][1]:
      self.heap[mark], self.heap[i] = self.heap[i], self.heap[mark]
    
    self.swim_n(mark)

  def sink_n(self, i):
    left_n = (i*2)+1
    right_n = i*2
    
    s = i
    if left_n > self.size or right_n > self.size:
      return
    
    if self.heap[i][1] > self.heap[left_n][1]:
      s = left_n
    
    if self.heap[i][1] > self.heap[right_n][1]:
      s = right_n

    if s != i:
      self.heap[i], self.heap[s] = self.heap[s], self.heap[i]
      self.swim_n(s)       
#-----------------------
  def enque(self, string):
    
    if string == 'see doctor':
      self.see_dr()
      return

    serial = int(string.split(' ')[-1])
    human = string.split(' ')[0]
    self.heap.append((human, serial))
    self.size= self.size+1
    if self.size > 0:
      self.swim_n(self.size)


  def see_dr(self):
    human = self.heap[1]
    self.heap[1], self.heap[self.size] = self.heap[self.size], self.heap[1]
    
    self.heap = self.heap[:self.size]
    self.size -= 1
    
    print('Visited:', human)
    output_file.write(f'Visited:{human} \n')
    self.sink_n(1)

  def print_queue(self):
    print(self.heap[1:])
    output_file.write(str(self.heap[1:]))

heap = heap_sort()
string = []
input_file1 = open("input3_a.txt", "r")
output_file= open("output3_b.txt", "w")
final=input_file1.readlines()
for p in final:
  p=p.strip()
  heap.enque(p)
print()
heap.print_queue()
output_file.close()