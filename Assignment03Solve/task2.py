# -*- coding: utf-8 -*-
"""task2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1iK4rsRnHTeQeZzBsXP6-O21gVx2KfAt9
"""

input_f=open('input2.txt',"r")
output_f=open('output2.txt',"w")
#-----------------------
class Min_heap :
  
  def __init__ (self) :
    self.heap = []

  def par(self, i) : #parent
    return (i-1) //2
  def left_c(self, i) : #left child
    return 2*i + 1
  def right_c(self, i) : #right child
    return 2*i + 2

  def swap_num(self, i, k) :
    self.heap[i], self.heap[k] = self.heap[k], self.heap[i]
  def add_num(self, save) :
    self.heap.append(save)
    
    self.swim_num(len(self.heap) - 1)
#--------------------
  def delete_num(self) :
    
    if len(self.heap) == 0 :
      return None
    
    self.swap_num(0, len(self.heap)-1)
    save = self.heap. pop()
    self.sink_num(0)
    
    return  save

  def build_n(self, arr) :
    self.heap = arr
    
    for k in range(len(arr)//2, -1, -1 ):
      self.sink_num(k)

  def swim_num(self, i) :
    
    while i > 0 and self.heap[i] < self.heap[self.par(i)]:
      self.swap_num(i, self.par(i))
      
      i = self.par(i)
#---------------------------
  def sink_num(self, i) :
    
    while True:
      temp = i
      right_num = self.right_c(i)
      left_num = self.left_c(i)
      
      
      if left_num < len(self.heap) and self.heap[left_num] < self.heap[temp] :
        temp = left_num
      
      if right_num < len(self.heap) and self.heap[right_num] < self.heap[temp] :
        temp = right_num
      
      if temp == i :
        break
      
      self.swap_num(i,temp)
      i = temp

  def heap_sort(self) :
    s_arr = []
    
    for _ in range(len(self.heap)):
      s_arr.append(self.delete_num())
    
    return s_arr
#-------------------
arr= [int(f) for f in input_f.readline().split(' ')]
j = Min_heap()
j.build_n(arr )
j.add_num(87)
output_f.write(str(j.heap)+'\n') 

j.delete_num()
output_f.write(str(j.heap)+'\n') 

final = j.heap_sort()
output_f.write(str(final))
input_f.close()
output_f.close()